#:import Camera kivy.uix.camera
#:import chain itertools.chain
#:import Clock kivy.clock.Clock
#:import gauss random.gauss
#:import Animation kivy.animation.Animation
#:import main coachsafeplaysafe
#: import ListAdapter kivy.adapters.listadapter.ListAdapter
#: import ListItemButton kivy.uix.listview.ListItemButton
ScreenOne:

<ScreenOne>
    fn: first_name
    ln: last_name
    student_list: students_list_view

    ListView:
        id: students_list_view
        adapter:
            ListAdapter(data=["Doug Smith"], cls=main.StudentListButton)

    GridLayout:
        rows: 2
        GridLayout:
            cols: 4
            Label:
                text: "First Name"
                height:20
            TextInput:
                height: 20
                id: first_name
            Label:
                text: "Last Name"
                height:20
            TextInput:
                height: 20
                id: last_name
        GridLayout:
            cols: 4
            Button:
                text: "Submit"
                size_hint_x: 15
                on_press: root.submit_student()
            Button:
                text: "Delete"
                size_hint_x: 15
                on_press: root.delete_student()
            Button:
                text: "Replace"
                size_hint_x: 15
                on_press: root.replace_student()
            Button:
                text: "Live Feed"
                size_hint_x: 15
                on_press: root.manager.current = 'VidSensor'


<ScreenTwo>:
    GridLayout:
        rows: 2
        GridLayout:
            cols: 2

            Camera:
                id: 'Cam'
                index: 0
                resolution: (1920, 1080)
                size: (self.width, self.height)

            GridLayout:
                rows: 2

                canvas:
                    Color:
                        rgba: .4, .4, 1, 1
                    Line:
                        points:
                            list(chain(*
                            [[
                            self.x + x * self.width / len(root.gyroX),
                            self.y + (self.height * 0.3) + y * self.height / 100
                            ] for x, y in enumerate(root.gyroX)])) if root.gyroX else []

                    Color:
                        rgba: 1, .4, .4, 1
                    Line:
                        points:
                            list(chain(*
                            [[
                            self.x + x * self.width / len(root.gyroY),
                            self.y + (self.height * 0.3) + y * self.height / 100
                            ] for x, y in enumerate(root.gyroY)])) if root.gyroY else []

                    Color:
                        rgba: .4, 1, .4, 1
                    Line:
                        points:
                            list(chain(*
                            [[
                            self.x + x * self.width / len(root.gyroZ),
                            self.y + (self.height * 0.3) + y * self.height / 100
                            ] for x, y in enumerate(root.gyroZ)])) if root.gyroZ else []

                    Color:
                        rgba: .4, .4, 1, 1
                    Line:
                        points:
                            list(chain(*
                            [[
                            self.x + x * self.width / len(root.accelX),
                            self.y + (self.height * 0.7) + y * self.height / 100
                            ] for x, y in enumerate(root.accelX)])) if root.accelX else []

                    Color:
                        rgba: 1, .4, .4, 1
                    Line:
                        points:
                            list(chain(*
                            [[
                            self.x + x * self.width / len(root.accelY),
                            self.y + (self.height * 0.7) + y * self.height / 100
                            ] for x, y in enumerate(root.accelY)])) if root.accelY else []

                    Color:
                        rgba: .4, 1, .4, 1
                    Line:
                        points:
                            list(chain(*
                            [[
                            self.x + x * self.width / len(root.accelZ),
                            self.y + (self.height * 0.7) + y * self.height / 100
                            ] for x, y in enumerate(root.accelZ)])) if root.accelZ else []

                    Color:
                        rgba: .4, .4, .4, 1
                    Line:
                        points:
                            list(chain(*
                            [[
                            self.x + x * self.width / len(root.values),
                            self.y + self.height/2 + y * self.height / 10
                            ] for x, y in enumerate(root.values)])) if root.values else []

                ToggleButton:
                    text: 'Start/Stop'
                    size_hint_y: None
                    on_state:
                        if self.state == 'down': Clock.schedule_interval(root.add_running_values, 0)
                        else: Clock.unschedule(root.add_running_values)

        Button:
            text: "Multiplayer View"
            size_hint: None, None
            size: root.width, 75
            on_press: root.manager.current = 'MPV'

