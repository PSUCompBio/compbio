.TH "src/eema/include/functions.h" 3 "Wed May 10 2017" "Embedded Element Method Algorithms (EMMA)" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/eema/include/functions.h
.SH SYNOPSIS
.br
.PP
\fC#include <iostream>\fP
.br
\fC#include <cmath>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <fstream>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <string>\fP
.br
\fC#include <iomanip>\fP
.br
\fC#include 'Eigen/Dense'\fP
.br
\fC#include 'Eigen/Eigenvalues'\fP
.br
\fC#include 'unsupported/Eigen/MatrixFunctions'\fP
.br
\fC#include 'Mesh\&.h'\fP
.br
\fC#include 'Materials\&.h'\fP
.br
\fC#include 'BC\&.h'\fP
.br
\fC#include 'GlobalVariables\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "MatrixXd \fBtext2matrix\fP (std::string name, int cols)"
.br
.ti -1c
.RI "void \fBmatrix2text\fP (std::string name, MatrixXd new_slave_master, int width)"
.br
.ti -1c
.RI "void \fBnew_vector2text\fP (std::string name, VectorXd vector, int width)"
.br
.ti -1c
.RI "void \fBappend_double2text\fP (std::string name, double a)"
.br
.ti -1c
.RI "void \fBappend_double2textWithTime\fP (std::string name, int frame, double time, double value)"
.br
.ti -1c
.RI "void \fBnew_double2text\fP (std::string name, double a)"
.br
.ti -1c
.RI "void \fBnew_double2textWithTime\fP (std::string name, int frame, double time, double value)"
.br
.ti -1c
.RI "void \fBfe_vtuWrite\fP (std::string output, int time_step, \fBMesh\fP mesh1)"
.br
.ti -1c
.RI "void \fBfe_pvdNew\fP (std::string output, int time_step, double time)"
.br
.ti -1c
.RI "void \fBfe_pvdAppend\fP (std::string output, int time_step, double time)"
.br
.ti -1c
.RI "void \fBfe_mainRead\fP (std::string file)"
.br
.ti -1c
.RI "VectorXd \fBfe_shapes_8\fP (double rvalue, double svalue, double tvalue)"
.br
.ti -1c
.RI "VectorXd \fBfe_dndr_8\fP (double rvalue, double svalue, double tvalue)"
.br
.ti -1c
.RI "VectorXd \fBfe_dnds_8\fP (double rvalue, double svalue, double tvalue)"
.br
.ti -1c
.RI "VectorXd \fBfe_dndt_8\fP (double rvalue, double svalue, double tvalue)"
.br
.ti -1c
.RI "VectorXd \fBguass_points\fP (int n)"
.br
.ti -1c
.RI "VectorXd \fBguass_weights\fP (int n)"
.br
.ti -1c
.RI "MatrixXd \fBguass_points_3d\fP (int nx, int ny, int nz)"
.br
.ti -1c
.RI "MatrixXd \fBguass_weights_3d\fP (int \fBndof\fP, int nx, int ny, int nz)"
.br
.ti -1c
.RI "MatrixXd \fBfe_calJacobian\fP (int dim, int nnel, VectorXd dndr, VectorXd dnds, VectorXd dndt, VectorXd xcoord, VectorXd ycoord, VectorXd zcoord)"
.br
.ti -1c
.RI "VectorXd \fBfe_dndx_8\fP (int nnel, VectorXd dndr, VectorXd dnds, VectorXd dndt, MatrixXd invJacobian)"
.br
.ti -1c
.RI "VectorXd \fBfe_dndy_8\fP (int nnel, VectorXd dndr, VectorXd dnds, VectorXd dndt, MatrixXd invJacobian)"
.br
.ti -1c
.RI "VectorXd \fBfe_dndz_8\fP (int nnel, VectorXd dndr, VectorXd dnds, VectorXd dndt, MatrixXd invJacobian)"
.br
.ti -1c
.RI "MatrixXd \fBfe_strDispMatrix\fP (int edof, int nnel, VectorXd dndx, VectorXd dndy, VectorXd dndz)"
.br
.ti -1c
.RI "MatrixXd \fBfe_shapeMatrix\fP (int edof, int nnel, VectorXd shapes)"
.br
.ti -1c
.RI "MatrixXd \fBfe_mass_hex\fP (MatrixXd nodes, VectorXi elements_row)"
.br
.ti -1c
.RI "MatrixXd \fBfe_mass_truss\fP (double rho, double A_truss, int edof, MatrixXd nodes, MatrixXd elements)"
.br
.ti -1c
.RI "MatrixXd \fBfe_transformMass\fP (MatrixXd m, int opt)"
.br
.ti -1c
.RI "MatrixXd \fBfe_calTransformation\fP (MatrixXd truss_nodes, int choice)"
.br
.ti -1c
.RI "MatrixXd \fBfe_calSimpTransformation\fP (MatrixXd truss_nodes)"
.br
.ti -1c
.RI "double \fBfe_minElementLength\fP (VectorXd xcoord, VectorXd ycoord, VectorXd zcoord)"
.br
.ti -1c
.RI "double \fBfe_maxElementLength\fP (VectorXd xcoord, VectorXd ycoord, VectorXd zcoord)"
.br
.ti -1c
.RI "MatrixXd \fBfe_strDispMatrix_totalLagrangian\fP (int edof, int nnel, VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u)"
.br
.ti -1c
.RI "MatrixXd \fBfe_calDefGrad\fP (VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u)"
.br
.ti -1c
.RI "VectorXd \fBfe_tensor2voigt\fP (MatrixXd A)"
.br
.ti -1c
.RI "MatrixXd \fBfe_voigt2tensor\fP (VectorXd B)"
.br
.ti -1c
.RI "MatrixXd \fBfe_calculate_matlmat\fP (int n, double E, double nu)"
.br
.ti -1c
.RI "VectorXd \fBfe_stressUpdate\fP (VectorXd dndx, VectorXd dndy, VectorXd dndz, MatrixXd disp_mat, VectorXd u, int opt, int return_opt)"
.br
.RI "This function calculates the updated stress for 3d elements - elastic, hyperelastic material models were implemented so far\&. "
.ti -1c
.RI "VectorXd \fBfe_stressUpdate_1d\fP (VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u_e, int opt, MatrixXd nodes)"
.br
.ti -1c
.RI "double \fBfe_get_mats\fP (int matl_code, int obj_interest)"
.br
.ti -1c
.RI "std::string \fBfe_get_model\fP (int matl_code)"
.br
.ti -1c
.RI "VectorXd \fBfe_mooneyrivlin_hyperelastic\fP (VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u, int opt, int return_opt)"
.br
.ti -1c
.RI "VectorXd \fBfe_ogden_hyperelastic\fP (VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u, int opt, int return_opt)"
.br
.ti -1c
.RI "VectorXd \fBfe_simple_elastic\fP (VectorXd dndx, VectorXd dndy, VectorXd dndz, MatrixXd disp_mat, VectorXd u, int opt, int return_opt)"
.br
.ti -1c
.RI "VectorXd \fBfe_saintvenant_elastic\fP (VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u, int opt, int return_opt)"
.br
.ti -1c
.RI "double \fBfe_calArea_4\fP (double a1, double a2, double a3, double a4, double b1, double b2, double b3, double b4, double c1, double c2, double c3, double c4)"
.br
.ti -1c
.RI "double \fBfe_calVolume\fP (VectorXd xcoord, VectorXd ycoord, VectorXd zcoord)"
.br
.ti -1c
.RI "int \fBfe_find\fP (VectorXd A, double a)"
.br
.ti -1c
.RI "int \fBfe_find\fP (VectorXd A, int a)"
.br
.ti -1c
.RI "VectorXd \fBfe_newtonRhapson\fP (VectorXd nat_coord, VectorXd xcoord, VectorXd ycoord, VectorXd zcoord)"
.br
.RI "This functions calculates the isoparametric coordinates of a set of coordinates in global system\&. "
.ti -1c
.RI "double \fBfe_function\fP (double a, std::string b, double time)"
.br
.ti -1c
.RI "double \fBfe_function_derivative\fP (double a, std::string b, double time)"
.br
.ti -1c
.RI "double \fBfe_function_d_derivative\fP (double a, std::string b, double time)"
.br
.ti -1c
.RI "MatrixXd \fBfe_concatenate_vector2matrix\fP (MatrixXd A, VectorXd B, int opt)"
.br
.ti -1c
.RI "MatrixXd \fBfe_insert_vector2matrix\fP (MatrixXd A, VectorXd B, int num, int opt)"
.br
.ti -1c
.RI "VectorXd \fBfe_getforce\fP (MatrixXd nodes, MatrixXi elements, int \fBndof\fP, VectorXd u, VectorXd v, VectorXd fext, int size_counter, MatrixXd nodes_truss, MatrixXi elements_truss)"
.br
.RI "Calculates the resultant nodal force after each time step\&. "
.ti -1c
.RI "VectorXi \fBfe_find_index\fP (VectorXi node_list)"
.br
.ti -1c
.RI "void \fBfe_mainEXPLICIT\fP ()"
.br
.RI "This function carries out the explicit dynamic analysis of the FEM problem\&. "
.ti -1c
.RI "VectorXd \fBfe_apply_bc_displacement\fP (VectorXd U, double time)"
.br
.ti -1c
.RI "VectorXd \fBfe_apply_bc_velocity\fP (VectorXd V, double time)"
.br
.ti -1c
.RI "VectorXd \fBfe_apply_bc_acceleration\fP (VectorXd A, double time)"
.br
.ti -1c
.RI "VectorXd \fBfe_apply_bc_load\fP (VectorXd fe, double time)"
.br
.ti -1c
.RI "MatrixXd \fBfe_assemble_mass\fP (MatrixXd mm, MatrixXd m, VectorXi node_list, int sdof)"
.br
.ti -1c
.RI "VectorXd \fBfe_gather\fP (VectorXd global_vec, VectorXd local_vec, VectorXi node_list, int sdof)"
.br
.ti -1c
.RI "VectorXd \fBfe_scatter\fP (VectorXd global_vec, VectorXd local_vec, VectorXi node_list, int sdof)"
.br
.ti -1c
.RI "MatrixXd \fBfe_updateNodes\fP (MatrixXd nodes, VectorXd displacements)"
.br
.ti -1c
.RI "VectorXd \fBfe_embed_preprocessing_mapping\fP (\fBMesh\fP host, \fBMesh\fP embed)"
.br
.ti -1c
.RI "VectorXd \fBfe_embed_preprocessing\fP (\fBMesh\fP host, \fBMesh\fP embed)"
.br
.ti -1c
.RI "void \fBfe_embed_preprocessing_length\fP (\fBMesh\fP host, \fBMesh\fP embed)"
.br
.ti -1c
.RI "int \fBfe_compute_host\fP (VectorXd A, MatrixXd nodes_host, MatrixXd elements_host_tmp)"
.br
.ti -1c
.RI "MatrixXd \fBfe_create_bbox\fP (VectorXd A, MatrixXd nodes_host, MatrixXd elements_host, double length)"
.br
.ti -1c
.RI "double \fBfe_calWaveSpeed\fP (int material_id)"
.br
.ti -1c
.RI "double \fBfe_getTimeStep\fP (MatrixXd nodes, MatrixXi elements, int \fBndof\fP, VectorXd u, VectorXd v, VectorXd fext)"
.br
.ti -1c
.RI "double \fBfe_calTimeStep\fP (VectorXd xcoord, VectorXd ycoord, VectorXd zcoord, int material_id)"
.br
.ti -1c
.RI "void \fBfe_vtkWrite_host\fP (std::string output, int format_choice, int mesh_choice, int time_step, MatrixXd nodes, MatrixXi elements)"
.br
.ti -1c
.RI "void \fBfe_vtkWrite_truss\fP (std::string output, int format_choice, int mesh_choice, int time_step, MatrixXd nodes, MatrixXi elements)"
.br
.ti -1c
.RI "void \fBfe_display_vector\fP (VectorXd A)"
.br
.ti -1c
.RI "void \fBfe_display_matrix\fP (MatrixXd A)"
.br
.ti -1c
.RI "MatrixXd \fBfe_apply_bc_stiffness\fP (MatrixXd kk, VectorXi bcdof, VectorXd bcval)"
.br
.ti -1c
.RI "MatrixXd \fBfe_stiffness_hex\fP (double E, double nu, int \fBndof\fP, int nnel, int edof, double xcoord[], double ycoord[], double zcoord[])"
.br
.ti -1c
.RI "MatrixXd \fBfe_stiffness_embed_truss\fP (MatrixXd nodes_truss, MatrixXd elements_truss, double E_truss, double A_truss, int \fBndof\fP, int nnel, int edof, double xcoord[], double ycoord[], double zcoord[])"
.br
.ti -1c
.RI "void \fBfe_writeElementStress\fP (MatrixXd sigma_all, double time)"
.br
.ti -1c
.RI "VectorXd \fBfe_calculateMass\fP (VectorXd mm, std::string type)"
.br
.ti -1c
.RI "VectorXd \fBfe_calculateMassDirectLumped\fP (VectorXd mm)"
.br
.ti -1c
.RI "VectorXd \fBfe_massLumped\fP (MatrixXd nodes, VectorXi elements_row)"
.br
.ti -1c
.RI "VectorXd \fBfe_calculateAccln\fP (VectorXd mm, VectorXd F_net)"
.br
.ti -1c
.RI "double \fBfe_calculateKE\fP (VectorXd mm, VectorXd V)"
.br
.ti -1c
.RI "double \fBfe_calculateKE\fP (MatrixXd mm, VectorXd V)"
.br
.ti -1c
.RI "VectorXd \fBtext2vector\fP (std::string name)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void append_double2text (std::string name, double a)"
Function appends a double value to a text file 
.PP
Definition at line 17 of file fe_vector2text\&.cpp\&.
.SS "void append_double2textWithTime (std::string name, int frame, double time, double value)"
Function appends a double value with solution times to a text file 
.PP
Definition at line 28 of file fe_vector2text\&.cpp\&.
.SS "VectorXd fe_apply_bc_acceleration (VectorXd A, double time)"
Function enforces acceleration boundary condition 
.PP
Definition at line 56 of file fe_apply_bc\&.cpp\&.
.SS "VectorXd fe_apply_bc_displacement (VectorXd U, double time)"
Function enforces displacement boundary condition 
.PP
Definition at line 5 of file fe_apply_bc\&.cpp\&.
.SS "VectorXd fe_apply_bc_load (VectorXd fe, double time)"
Function updates the applied load 
.PP
Definition at line 99 of file fe_apply_bc\&.cpp\&.
.SS "MatrixXd fe_apply_bc_stiffness (MatrixXd kk, VectorXi bcdof, VectorXd bcval)"

.PP
Definition at line 118 of file fe_apply_bc\&.cpp\&.
.SS "VectorXd fe_apply_bc_velocity (VectorXd V, double time)"
Function enforces velocity boundary condition 
.PP
Definition at line 24 of file fe_apply_bc\&.cpp\&.
.SS "MatrixXd fe_assemble_mass (MatrixXd mm, MatrixXd m, VectorXi node_list, int sdof)"
Assembles the global mass matrix 
.PP
Definition at line 24 of file fe_assemble_mass\&.cpp\&.
.SS "double fe_calArea_4 (double a1, double a2, double a3, double a4, double b1, double b2, double b3, double b4, double c1, double c2, double c3, double c4)"
Calculates the area of a face with 4 vertices 
.PP
Definition at line 5 of file fe_calArea_4\&.cpp\&.
.SS "MatrixXd fe_calculate_matlmat (int n, double E, double nu)"
Create material matrix for isotropic elastic case 
.PP
Definition at line 20 of file fe_simple_elastic\&.cpp\&.
.SS "VectorXd fe_calculateAccln (VectorXd mm, VectorXd F_net)"

.PP
Definition at line 5 of file fe_calculateAccln\&.cpp\&.
.SS "double fe_calculateKE (VectorXd mm, VectorXd V)"

.PP
Definition at line 5 of file fe_calculateKE\&.cpp\&.
.SS "double fe_calculateKE (MatrixXd mm, VectorXd V)"

.PP
Definition at line 15 of file fe_calculateKE\&.cpp\&.
.SS "VectorXd fe_calculateMass (VectorXd mm, std::string type)"

.PP
Definition at line 5 of file fe_calculateMass\&.cpp\&.
.SS "VectorXd fe_calculateMassDirectLumped (VectorXd mm)"
number of elements 
.PP
Definition at line 14 of file fe_calculateMass\&.cpp\&.
.SS "MatrixXd fe_calDefGrad (VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u)"
Calculates the deformation gradient 
.PP
Definition at line 8 of file fe_calDefGrad\&.cpp\&.
.SS "MatrixXd fe_calJacobian (int dim, int nnel, VectorXd dndr, VectorXd dnds, VectorXd dndt, VectorXd xcoord, VectorXd ycoord, VectorXd zcoord)"
Calculates the jacobian -- using the derivates of shape functions 
.PP
Definition at line 7 of file fe_calJacobian\&.cpp\&.
.SS "MatrixXd fe_calSimpTransformation (MatrixXd truss_nodes)"

.PP
Definition at line 7 of file fe_calSimpTransformation\&.cpp\&.
.SS "double fe_calTimeStep (VectorXd xcoord, VectorXd ycoord, VectorXd zcoord, int material_id)"
Calculates the time step for a single element based on its dimensions and material model
.PP
For a single element - this function calculates the volume of the element and calculates the critical time step based on the wave speed\&. 
.PP
Definition at line 5 of file fe_calTimeStep\&.cpp\&.
.SS "MatrixXd fe_calTransformation (MatrixXd truss_nodes, int choice)"
Calculates the transformation matrix - transformation from local (truss) coordinate system to global (3d hex) coordinate system 
.PP
Definition at line 7 of file fe_calTransformation\&.cpp\&.
.SS "double fe_calVolume (VectorXd xcoord, VectorXd ycoord, VectorXd zcoord)"
Calculates the volume of a 3d element 
.PP
Definition at line 6 of file fe_calVolume\&.cpp\&.
.SS "double fe_calWaveSpeed (int material_id)"
Calculates the wavespeed for a particular material model
.PP
This function calculates the wave speed for an element based on its material properties 
.PP
Definition at line 6 of file fe_calWaveSpeed\&.cpp\&.
.SS "int fe_compute_host (VectorXd A, MatrixXd nodes_host, MatrixXd elements_host_tmp)"

.PP
Definition at line 4 of file fe_compute_host\&.cpp\&.
.SS "MatrixXd fe_concatenate_vector2matrix (MatrixXd A, VectorXd B, int opt)"
Concatenate a vector to a matrix -- rowwise or coloumn wise 
.PP
Definition at line 5 of file fe_concatenate_vector2matrix\&.cpp\&.
.SS "MatrixXd fe_create_bbox (VectorXd A, MatrixXd nodes_host, MatrixXd elements_host, double length)"

.PP
Definition at line 4 of file fe_create_bbox\&.cpp\&.
.SS "void fe_display_matrix (MatrixXd A)"
Prints out a matrix 
.PP
Definition at line 5 of file fe_display\&.cpp\&.
.SS "void fe_display_vector (VectorXd A)"
Prints out a vector 
.PP
Definition at line 41 of file fe_display\&.cpp\&.
.SS "VectorXd fe_dndr_8 (double rvalue, double svalue, double tvalue)"
dndr of isoparametric element calculated for particular r, s, and t 
.PP
Definition at line 6 of file fe_dn_iso_8\&.cpp\&.
.SS "VectorXd fe_dnds_8 (double rvalue, double svalue, double tvalue)"
dnds of isoparametric element calculated for particular r, s, and t 
.PP
Definition at line 44 of file fe_dn_iso_8\&.cpp\&.
.SS "VectorXd fe_dndt_8 (double rvalue, double svalue, double tvalue)"
dndt of isoparametric element calculated for particular r, s, and t 
.PP
Definition at line 82 of file fe_dn_iso_8\&.cpp\&.
.SS "VectorXd fe_dndx_8 (int nnel, VectorXd dndr, VectorXd dnds, VectorXd dndt, MatrixXd invJacobian)"
dndx of actual element calculates using jacobian and shape function derivates calculated in the isoparametric element 
.PP
Definition at line 6 of file fe_dn_actual_8\&.cpp\&.
.SS "VectorXd fe_dndy_8 (int nnel, VectorXd dndr, VectorXd dnds, VectorXd dndt, MatrixXd invJacobian)"
dndy of actual element calculates using jacobian and shape function derivates calculated in the isoparametric element 
.PP
Definition at line 17 of file fe_dn_actual_8\&.cpp\&.
.SS "VectorXd fe_dndz_8 (int nnel, VectorXd dndr, VectorXd dnds, VectorXd dndt, MatrixXd invJacobian)"
dndz of actual element calculates using jacobian and shape function derivates calculated in the isoparametric element 
.PP
Definition at line 28 of file fe_dn_actual_8\&.cpp\&.
.SS "VectorXd fe_embed_preprocessing (\fBMesh\fP host, \fBMesh\fP embed)"
This function carries out all the required pre-processing steps for embedded element constraint 
.PP
Definition at line 7 of file fe_embed_preprocessing\&.cpp\&.
.SS "void fe_embed_preprocessing_length (\fBMesh\fP host, \fBMesh\fP embed)"
Checks if the host mesh has zero length edges
.PP
Checks if the embedded mesh has zero length edges 
.PP
Definition at line 13 of file fe_embed_preprocessing\&.cpp\&.
.SS "VectorXd fe_embed_preprocessing_mapping (\fBMesh\fP host, \fBMesh\fP embed)"
Temporary Matrices useful in the mapping scheme
.PP
Creates a bounding box and seperates the mesh in the bouding box from the whole mesh 
.PP
Definition at line 4 of file fe_embed_preprocessing_mapping\&.cpp\&.
.SS "int fe_find (VectorXd A, double a)"
find the poistion index of a double value in a vector -- analogous to 'find' function in MATLAB 
.PP
Definition at line 4 of file fe_find\&.cpp\&.
.SS "int fe_find (VectorXd A, int a)"
find the poistion index of a integer value in a vector -- analogous to 'find' function in MATLAB 
.PP
Definition at line 18 of file fe_find\&.cpp\&.
.SS "VectorXi fe_find_index (VectorXi node_list)"
Find the index based on the DOF of a particular node 
.PP
Definition at line 16 of file fe_find_index\&.cpp\&.
.SS "double fe_function (double a, std::string b, double time)"
Function outputs the standard curve values 
.PP
Definition at line 5 of file fe_function\&.cpp\&.
.SS "double fe_function_d_derivative (double a, std::string b, double time)"
Function outputs the double derivative of a time dependent variable at a time instant 
.PP
Definition at line 49 of file fe_function\&.cpp\&.
.SS "double fe_function_derivative (double a, std::string b, double time)"
Function outputs the derivative of a time dependent variable at a time instant 
.PP
Definition at line 27 of file fe_function\&.cpp\&.
.SS "VectorXd fe_gather (VectorXd global_vec, VectorXd local_vec, VectorXi node_list, int sdof)"
Creates element level vector (displacement, velocity, acceleration etc\&.) from a system level vector 
.PP
Definition at line 6 of file fe_gather\&.cpp\&.
.SS "double fe_get_mats (int matl_code, int obj_interest)"
Extracts the material parameter values based on the material id 
.PP
Definition at line 5 of file fe_get_mats\&.cpp\&.
.SS "std::string fe_get_model (int matl_code)"
Extracts the material model name 
.PP
Definition at line 5 of file fe_get_model\&.cpp\&.
.SS "VectorXd fe_getforce (MatrixXd nodes, MatrixXi elements, int ndof, VectorXd u, VectorXd v, VectorXd fext, int size_counter, MatrixXd nodes_truss, MatrixXi elements_truss)"

.PP
Calculates the resultant nodal force after each time step\&. Calculates the resultant force vector - Box 6\&.1 of Belytschko
.PP
This function represents the 'getforce' step in Belytschko (Box 6\&.1 - Explicit FEM Algorithm)\&. For each hex element, this function calculates the internal nodal force vector and the resultant nodal force vector\&. Once, this is calculated for each element, the resultant vectors are scattered into global vectors\&. 
.PP
Definition at line 13 of file fe_getforce\&.cpp\&.
.SS "double fe_getTimeStep (MatrixXd nodes, MatrixXi elements, int ndof, VectorXd u, VectorXd v, VectorXd fext)"
Outputs the critical time step based on all the elements in a FE analysis
.PP
For all elements -- this function calculates the minimum critical timestep 
.PP
Definition at line 6 of file fe_getTimeStep\&.cpp\&.
.SS "MatrixXd fe_insert_vector2matrix (MatrixXd A, VectorXd B, int num, int opt)"
Function concatenates vector to a matrix 
.PP
Definition at line 27 of file fe_concatenate_vector2matrix\&.cpp\&.
.SS "void fe_mainEXPLICIT ()"

.PP
This function carries out the explicit dynamic analysis of the FEM problem\&. Run the finite element analysis using an explicit dynamic method number of elements
.PP
Apply Loading Conditions - time dependent loading conditions
.PP
Calculate the time at half time step
.PP
Update the time by adding full time step
.PP
Partially Update Nodal Velocities
.PP
Enforce Velocity Boundary Conditions
.PP
Update Nodal Displacements
.PP
Calculate Accelerations
.PP
Completely Update the nodal velocities
.PP
Projection of displacements to the embedded mesh is needed 
.PP
Definition at line 10 of file fe_mainEXPLICIT\&.cpp\&.
.SS "void fe_mainRead (std::string file)"
Read the input text file -- for a particular job 
.PP
Definition at line 32 of file fe_mainRead\&.cpp\&.
.SS "MatrixXd fe_mass_hex (MatrixXd nodes, VectorXi elements_row)"
Calculates the mass matrix for a hex element 
.PP
Definition at line 4 of file fe_mass_hex\&.cpp\&.
.SS "MatrixXd fe_mass_truss (double rho, double A_truss, int edof, MatrixXd nodes, MatrixXd elements)"
Calculates the mass of a truss element 
.PP
Definition at line 103 of file fe_mass_hex\&.cpp\&.
.SS "VectorXd fe_massLumped (MatrixXd nodes, VectorXi elements_row)"

.PP
Definition at line 4 of file fe_massLumped\&.cpp\&.
.SS "double fe_maxElementLength (VectorXd xcoord, VectorXd ycoord, VectorXd zcoord)"
Function outputs the maximum length for an element 
.PP
Definition at line 5 of file fe_maxElementLength\&.cpp\&.
.SS "double fe_minElementLength (VectorXd xcoord, VectorXd ycoord, VectorXd zcoord)"
Function outputs the minimum length for an element 
.PP
Definition at line 5 of file fe_minElementLength\&.cpp\&.
.SS "VectorXd fe_mooneyrivlin_hyperelastic (VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u, int opt, int return_opt)"
Function calculates the stress vector for a mooney-rivlin material outputs 2nd cauchy stress tensor in vector form
.PP
outputs cauchy stress tensor in vector form 
.PP
Definition at line 5 of file fe_mooneyrivlin_hyperelastic\&.cpp\&.
.SS "VectorXd fe_newtonRhapson (VectorXd nat_coord, VectorXd xcoord, VectorXd ycoord, VectorXd zcoord)"

.PP
This functions calculates the isoparametric coordinates of a set of coordinates in global system\&. Function calculates vector result using newton rhapson model
.PP
n Vector showing the coordinates in iso-parametric system 
.PP
Definition at line 10 of file fe_newtonRhapson\&.cpp\&.
.SS "VectorXd fe_ogden_hyperelastic (VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u, int opt, int return_opt)"
Function calculates the stress vector for a ogden-hyperelastic material 
.PP
Definition at line 5 of file fe_ogden_hyperelastic\&.cpp\&.
.SS "void fe_pvdAppend (std::string output, int time_step, double time)"
Function appends PVD file in the VTU folder Output File Name
.PP
Append New Line of Data
.PP
Write Footer 
.PP
Definition at line 173 of file fe_vtu\&.cpp\&.
.SS "void fe_pvdNew (std::string output, int time_step, double time)"
Function creates new PVD file in the VTU folder Output File Name
.PP
Write Header
.PP
Write First Line of Data 
.PP
Definition at line 149 of file fe_vtu\&.cpp\&.
.SS "VectorXd fe_saintvenant_elastic (VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u, int opt, int return_opt)"
Function calculates the stress vector for a saint venant elastic material model outputs 2nd cauchy stress tensor in vector form
.PP
outputs cauchy stress tensor in vector form 
.PP
Definition at line 5 of file fe_saintvenant_elastic\&.cpp\&.
.SS "VectorXd fe_scatter (VectorXd global_vec, VectorXd local_vec, VectorXi node_list, int sdof)"
Updates a system level vector based on the element level vector 
.PP
Definition at line 6 of file fe_scatter\&.cpp\&.
.SS "MatrixXd fe_shapeMatrix (int edof, int nnel, VectorXd shapes)"
Outputs the shape function matrix for an element 
.PP
Definition at line 7 of file fe_shapeMatrix\&.cpp\&.
.SS "VectorXd fe_shapes_8 (double rvalue, double svalue, double tvalue)"
Creates the shape functions for an 8 noded element 
.PP
Definition at line 7 of file fe_shapes\&.cpp\&.
.SS "VectorXd fe_simple_elastic (VectorXd dndx, VectorXd dndy, VectorXd dndz, MatrixXd disp_mat, VectorXd u, int opt, int return_opt)"
Function calculates the stress vector for a simple elastic (small strain) material 
.PP
Definition at line 7 of file fe_simple_elastic\&.cpp\&.
.SS "MatrixXd fe_stiffness_embed_truss (MatrixXd nodes_truss, MatrixXd elements_truss, double E_truss, double A_truss, int ndof, int nnel, int edof, double xcoord[], double ycoord[], double zcoord[])"
Internal nodal force vector for a truss (1D) element 
.PP
Definition at line 6 of file fe_stiffness_embed_truss\&.cpp\&.
.SS "MatrixXd fe_stiffness_hex (double E, double nu, int ndof, int nnel, int edof, double xcoord[], double ycoord[], double zcoord[])"
Internal nodal force vector for a hexahedral element 
.PP
Definition at line 7 of file fe_stiffness_hex\&.cpp\&.
.SS "MatrixXd fe_strDispMatrix (int edof, int nnel, VectorXd dndx, VectorXd dndy, VectorXd dndz)"
Strain displacement matrix B 
.PP
Definition at line 5 of file fe_strDispMatrix\&.cpp\&.
.SS "MatrixXd fe_strDispMatrix_totalLagrangian (int edof, int nnel, VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u)"
Calculates the strain displacement matrix in total lagrangian system 
.PP
Definition at line 31 of file fe_strDispMatrix\&.cpp\&.
.SS "VectorXd fe_stressUpdate (VectorXd dndx, VectorXd dndy, VectorXd dndz, MatrixXd disp_mat, VectorXd u, int opt, int return_opt)"

.PP
This function calculates the updated stress for 3d elements - elastic, hyperelastic material models were implemented so far\&. Updates the stress at each time step based on the material model This function is for 2d or 3d elements\&. For 1d elements, different stress update function was included
.PP
This block develops outputs the updated stress for a 3d elastic material
.PP
This block outputs the updated stress for a mooney-rivlin hyperelastic material model
.PP
This block develops outputs the updated stress for a 3d ogden hyperelastic material 
.PP
Definition at line 7 of file fe_stressUpdate\&.cpp\&.
.SS "VectorXd fe_stressUpdate_1d (VectorXd dndx, VectorXd dndy, VectorXd dndz, VectorXd u_e, int opt, MatrixXd nodes)"
Updates the stress at each time step based on the material model for a 1d element
.PP
This function calculates the updated stress for 1d elements - hyperelastic material model was implemented so far\&. 
.PP
Definition at line 6 of file fe_stressUpdate_1d\&.cpp\&.
.SS "VectorXd fe_tensor2voigt (MatrixXd A)"
Writes a symmetric tensor into a Voigt vector form
.PP
This function converts tensor into voigt's vector notation The tensor should be either 2X2 or 3X3\&. The tensor should be symmetric for its transformation into Voigt Vector 
.PP
Definition at line 8 of file fe_tensor2voigt\&.cpp\&.
.SS "MatrixXd fe_transformMass (MatrixXd m, int opt)"
Converts a normal mass matrix into a lumped mass matrix 
.PP
Definition at line 6 of file fe_transformMass\&.cpp\&.
.SS "MatrixXd fe_updateNodes (MatrixXd nodes, VectorXd displacements)"
Updates the nodal coordinates based on the displacements 
.PP
Definition at line 9 of file fe_update\&.cpp\&.
.SS "MatrixXd fe_voigt2tensor (VectorXd B)"
Writes a Voigt vector into a symmetric tensor form
.PP
This function converts vector in voigt's vector notation into a tensor The tensor will be either 2X2 or 3X3\&. 
.PP
Definition at line 8 of file fe_voigt2tensor\&.cpp\&.
.SS "void fe_vtkWrite_host (std::string output, int format_choice, int mesh_choice, int time_step, MatrixXd nodes, MatrixXi elements)"
Writes VTK files for host mesh 
.PP
Definition at line 6 of file fe_vtk\&.cpp\&.
.SS "void fe_vtkWrite_truss (std::string output, int format_choice, int mesh_choice, int time_step, MatrixXd nodes, MatrixXi elements)"
Writes VTK files for truss mesh 
.PP
Definition at line 138 of file fe_vtk\&.cpp\&.
.SS "void fe_vtuWrite (std::string output, int time_step, \fBMesh\fP mesh1)"
Function writes the results into the VTU folder Points Info
.PP
Cells Info
.PP
Point Data - Displacements
.PP
Points Data - Velocities
.PP
Points Data - Accelerations
.PP
\fBMesh\fP Data - Stresses
.PP
\fBMesh\fP Data - Strains
.PP
Output File Name
.PP
Points Data
.PP
Cell Data
.PP
Point Vector Data - Displacements
.PP
Point Vector Data - Velocities
.PP
Point Vector Data - Accelerations
.PP
Cell Data - Stresses and Strains 
.PP
Definition at line 5 of file fe_vtu\&.cpp\&.
.SS "void fe_writeElementStress (MatrixXd sigma_all, double time)"

.PP
Definition at line 12 of file fe_write\&.cpp\&.
.SS "VectorXd guass_points (int n)"
Create a guass_point vector of n values 
.PP
Definition at line 5 of file fe_guass_points\&.cpp\&.
.SS "MatrixXd guass_points_3d (int nx, int ny, int nz)"
Creates a guass point matrix in 3D 
.PP
Definition at line 4 of file fe_guass_points_3d\&.cpp\&.
.SS "VectorXd guass_weights (int n)"
Creates a guass_weight vector of n values 
.PP
Definition at line 5 of file fe_guass_weights\&.cpp\&.
.SS "MatrixXd guass_weights_3d (int ndof, int nx, int ny, int nz)"
Creates a guass weight matrix in 3D 
.PP
Definition at line 5 of file fe_guass_weights_3d\&.cpp\&.
.SS "void matrix2text (std::string name, MatrixXd new_slave_master, int width)"
Writes a matrix into a text file 
.PP
Definition at line 5 of file fe_matrix2text\&.cpp\&.
.SS "void new_double2text (std::string name, double a)"
Function creates a new text file and writes a double value to it 
.PP
Definition at line 42 of file fe_vector2text\&.cpp\&.
.SS "void new_double2textWithTime (std::string name, int frame, double time, double value)"
Function creates a new text file and writes a double value with solution times to it 
.PP
Definition at line 53 of file fe_vector2text\&.cpp\&.
.SS "void new_vector2text (std::string name, VectorXd vector, int width)"
Writes a vector into a text file 
.PP
Definition at line 5 of file fe_vector2text\&.cpp\&.
.SS "MatrixXd text2matrix (std::string name, int cols)"
Reads a text file into matrix 
.PP
Definition at line 10 of file fe_text2matrix\&.cpp\&.
.SS "VectorXd text2vector (std::string name)"

.PP
Definition at line 44 of file fe_text2matrix\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Embedded Element Method Algorithms (EMMA) from the source code\&.
